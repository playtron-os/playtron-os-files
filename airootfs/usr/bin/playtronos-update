#! /bin/bash

if [ $EUID -ne 0 ]; then
	echo "$(basename $0) must be run as root"
	exit 1
fi

__ensure_dir() {
	local path=$1
	if [ -z "$path" ]; then
		echo "ensure_dir: Path not specified"
		return 1
	fi

	local dir=$(dirname $path)
	mkdir -p $dir
}

# Contains the following optional variables:
# - BASE: the full container URL
# - PROJECT: the container's project in the registry
# - TAG: the container tag/version
#
CONFIG_FILE=/etc/playtron-os.conf
__ensure_dir $CONFIG_FILE
touch $CONFIG_FILE
source $CONFIG_FILE

REMOTE_FILE=/etc/ostree/remotes.d/playtron-os.conf
AUTH_FILE=/etc/ostree/auth.json

__write_remote() {
local project=$1
__ensure_dir $REMOTE_FILE
cat > $REMOTE_FILE << EOL
[remote "playtron-os"]
url=ostree-unverified-registry:registry.playtron.one/${project}/playtronos
gpg-verify=false
EOL
}

__write_auth() {
local token=$1
__ensure_dir $AUTH_FILE
cat > $AUTH_FILE << EOL
{
    "auths": {
        "registry.playtron.one": {
            "auth": "${token}"
        }
    }
}
EOL
}

rebase() {
	local project=$1
	local tag=$2
	local token=$3

	# Ensure $project and $tag are specified, $token is optional
	if [ -z "$project" ]; then
		echo "Project not specified"
		exit 1
	fi

	if [ -z "$tag" ]; then
		echo "Tag not specified"
		exit 1
	fi

	echo "BASE=ostree-unverified-registry:registry.playtron.one/${project}/playtronos:${tag}" > $CONFIG_FILE
	echo "PROJECT=${project}" >> $CONFIG_FILE
	echo "TAG=${tag}" >> $CONFIG_FILE
	__write_remote $project

	if [ -n "$token" ]; then
		__write_auth $token
	else
		rm -f $AUTH_FILE
	fi
}

__rebase_status() {
	if [ -z "$BASE" ]; then
		# there is no base specified, so no rebase
		echo -n "none"
		return
	fi

	current_base=$(rpm-ostree status | grep "●" | tr -d '●' | tr -d ' ')
	next_base=$(rpm-ostree status | grep -A 1 "Deployments:" | tail -1 | tr -d '●' | tr -d ' ')

	if [ "$BASE" != "$next_base" ]; then
		# there is a rebase yet to be completed
		echo -n "needed"
	elif [ "$BASE" != "$current_base" ]; then
		# rebase was completed, but the system needs a reboot
		echo -n "completed"
	else
		# no rebase needed nor completed
		echo -n "none"
	fi
}

update() {
	case $(__rebase_status) in
		"needed")
			rpm-ostree rebase $BASE
		;;
		"completed")
			return
		;;
		"none")
			rpm-ostree update
		;;
		*)
			echo "ERROR: Unknown rebase status"
			exit 1
		;;
	esac
}

check() {
	case $(__rebase_status) in
		"needed")
			echo "New update available (rebase)"
			exit 0
		;;
		"completed")
			echo "No update available (rebase completed)"
			exit 1
		;;
		"none")
			rpm-ostree update --check
		;;
		*)
			echo "ERROR: Unknown rebase status"
			exit 1
		;;
	esac
}


CMD=$1
shift

if [ "$CMD" == "--rebase" ]; then
	rebase $@
elif [ "$CMD" == "--check" ]; then
	check
else
	update
fi
